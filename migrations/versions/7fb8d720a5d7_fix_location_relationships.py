"""fix location relationships

Revision ID: 7fb8d720a5d7
Revises: 33f84e3d6b83
Create Date: 2025-04-06 00:44:03.961681

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7fb8d720a5d7'
down_revision: Union[str, None] = '33f84e3d6b83'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_message_attachments_id', table_name='message_attachments')
    op.drop_table('message_attachments')
    op.drop_index('ix_addresses_id', table_name='addresses')
    op.drop_table('addresses')
    op.add_column('hubs', sa.Column('description', sa.String(), nullable=True))
    op.add_column('hubs', sa.Column('latitude', sa.Float(), nullable=False))
    op.add_column('hubs', sa.Column('longitude', sa.Float(), nullable=False))
    op.add_column('hubs', sa.Column('address', sa.String(), nullable=True))
    op.drop_constraint(None, 'hubs', type_='foreignkey')
    op.drop_column('hubs', 'coordinates')
    op.drop_column('hubs', 'address_id')
    op.add_column('locations', sa.Column('user_id', sa.Integer(), nullable=True))
    op.add_column('locations', sa.Column('latitude', sa.Float(), nullable=False))
    op.add_column('locations', sa.Column('longitude', sa.Float(), nullable=False))
    op.add_column('locations', sa.Column('location_type', sa.String(), nullable=True))
    op.add_column('locations', sa.Column('address', sa.String(), nullable=True))
    op.drop_constraint(None, 'locations', type_='foreignkey')
    op.create_foreign_key(None, 'locations', 'users', ['user_id'], ['id'])
    op.drop_column('locations', 'name')
    op.drop_column('locations', 'coordinates')
    op.drop_column('locations', 'address_id')
    op.add_column('payments', sa.Column('currency', sa.String(), nullable=True))
    op.add_column('payments', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('payments', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('payments', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('payments', 'booking_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('payments', 'status',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('payments', 'payment_method',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('payments', 'transaction_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('payments', 'payment_time')
    op.add_column('ride_bookings', sa.Column('passenger_id', sa.Integer(), nullable=True))
    op.add_column('ride_bookings', sa.Column('seats_booked', sa.Integer(), nullable=True))
    op.add_column('ride_bookings', sa.Column('booking_status', sa.String(), nullable=True))
    op.add_column('ride_bookings', sa.Column('pickup_lat', sa.Float(), nullable=True))
    op.add_column('ride_bookings', sa.Column('pickup_lng', sa.Float(), nullable=True))
    op.add_column('ride_bookings', sa.Column('dropoff_lat', sa.Float(), nullable=True))
    op.add_column('ride_bookings', sa.Column('dropoff_lng', sa.Float(), nullable=True))
    op.add_column('ride_bookings', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.alter_column('ride_bookings', 'ride_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint(None, 'ride_bookings', type_='foreignkey')
    op.drop_constraint(None, 'ride_bookings', type_='foreignkey')
    op.create_foreign_key(None, 'ride_bookings', 'users', ['passenger_id'], ['id'])
    op.create_foreign_key(None, 'ride_bookings', 'rides', ['ride_id'], ['id'], ondelete='CASCADE')
    op.drop_column('ride_bookings', 'status')
    op.drop_column('ride_bookings', 'price')
    op.drop_column('ride_bookings', 'booking_time')
    op.drop_column('ride_bookings', 'passenger_count')
    op.drop_column('ride_bookings', 'user_id')
    op.add_column('rides', sa.Column('origin_lat', sa.Float(), nullable=False))
    op.add_column('rides', sa.Column('origin_lng', sa.Float(), nullable=False))
    op.add_column('rides', sa.Column('destination_lat', sa.Float(), nullable=False))
    op.add_column('rides', sa.Column('destination_lng', sa.Float(), nullable=False))
    op.add_column('rides', sa.Column('price_per_seat', sa.Float(), nullable=True))
    op.add_column('rides', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.alter_column('rides', 'available_seats',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint(None, 'rides', type_='foreignkey')
    op.drop_constraint(None, 'rides', type_='foreignkey')
    op.drop_column('rides', 'destination_id')
    op.drop_column('rides', 'starting_hub_id')
    op.drop_column('rides', 'vehicle_type')
    op.drop_column('rides', 'capacity')
    op.add_column('users', sa.Column('is_verified', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('latitude', sa.Float(), nullable=True))
    op.add_column('users', sa.Column('longitude', sa.Float(), nullable=True))
    op.add_column('users', sa.Column('work_latitude', sa.Float(), nullable=True))
    op.add_column('users', sa.Column('work_longitude', sa.Float(), nullable=True))
    op.add_column('users', sa.Column('enterprise_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('employee_id', sa.String(), nullable=True))
    op.add_column('users', sa.Column('home_street', sa.String(), nullable=True))
    op.add_column('users', sa.Column('home_house_number', sa.String(), nullable=True))
    op.add_column('users', sa.Column('home_post_code', sa.String(), nullable=True))
    op.add_column('users', sa.Column('home_city', sa.String(), nullable=True))
    op.add_column('users', sa.Column('work_street', sa.String(), nullable=True))
    op.add_column('users', sa.Column('work_house_number', sa.String(), nullable=True))
    op.add_column('users', sa.Column('work_post_code', sa.String(), nullable=True))
    op.add_column('users', sa.Column('work_city', sa.String(), nullable=True))
    op.drop_column('users', 'work_location')
    op.drop_column('users', 'home_location')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('home_location', sa.VARCHAR(), nullable=True))
    op.add_column('users', sa.Column('work_location', sa.VARCHAR(), nullable=True))
    op.drop_column('users', 'work_city')
    op.drop_column('users', 'work_post_code')
    op.drop_column('users', 'work_house_number')
    op.drop_column('users', 'work_street')
    op.drop_column('users', 'home_city')
    op.drop_column('users', 'home_post_code')
    op.drop_column('users', 'home_house_number')
    op.drop_column('users', 'home_street')
    op.drop_column('users', 'employee_id')
    op.drop_column('users', 'enterprise_id')
    op.drop_column('users', 'work_longitude')
    op.drop_column('users', 'work_latitude')
    op.drop_column('users', 'longitude')
    op.drop_column('users', 'latitude')
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'is_verified')
    op.add_column('rides', sa.Column('capacity', sa.INTEGER(), nullable=False))
    op.add_column('rides', sa.Column('vehicle_type', sa.VARCHAR(), nullable=False))
    op.add_column('rides', sa.Column('starting_hub_id', sa.INTEGER(), nullable=False))
    op.add_column('rides', sa.Column('destination_id', sa.INTEGER(), nullable=False))
    op.create_foreign_key(None, 'rides', 'locations', ['destination_id'], ['id'])
    op.create_foreign_key(None, 'rides', 'hubs', ['starting_hub_id'], ['id'])
    op.alter_column('rides', 'available_seats',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('rides', 'created_at')
    op.drop_column('rides', 'price_per_seat')
    op.drop_column('rides', 'destination_lng')
    op.drop_column('rides', 'destination_lat')
    op.drop_column('rides', 'origin_lng')
    op.drop_column('rides', 'origin_lat')
    op.add_column('ride_bookings', sa.Column('user_id', sa.INTEGER(), nullable=False))
    op.add_column('ride_bookings', sa.Column('passenger_count', sa.INTEGER(), nullable=False))
    op.add_column('ride_bookings', sa.Column('booking_time', sa.DATETIME(), nullable=True))
    op.add_column('ride_bookings', sa.Column('price', sa.FLOAT(), nullable=False))
    op.add_column('ride_bookings', sa.Column('status', sa.VARCHAR(), nullable=True))
    op.drop_constraint(None, 'ride_bookings', type_='foreignkey')
    op.drop_constraint(None, 'ride_bookings', type_='foreignkey')
    op.create_foreign_key(None, 'ride_bookings', 'rides', ['ride_id'], ['id'])
    op.create_foreign_key(None, 'ride_bookings', 'users', ['user_id'], ['id'])
    op.alter_column('ride_bookings', 'ride_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('ride_bookings', 'created_at')
    op.drop_column('ride_bookings', 'dropoff_lng')
    op.drop_column('ride_bookings', 'dropoff_lat')
    op.drop_column('ride_bookings', 'pickup_lng')
    op.drop_column('ride_bookings', 'pickup_lat')
    op.drop_column('ride_bookings', 'booking_status')
    op.drop_column('ride_bookings', 'seats_booked')
    op.drop_column('ride_bookings', 'passenger_id')
    op.add_column('payments', sa.Column('payment_time', sa.DATETIME(), nullable=True))
    op.alter_column('payments', 'transaction_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('payments', 'payment_method',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('payments', 'status',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('payments', 'booking_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('payments', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('payments', 'updated_at')
    op.drop_column('payments', 'created_at')
    op.drop_column('payments', 'currency')
    op.add_column('locations', sa.Column('address_id', sa.INTEGER(), nullable=True))
    op.add_column('locations', sa.Column('coordinates', sa.VARCHAR(), nullable=True))
    op.add_column('locations', sa.Column('name', sa.VARCHAR(), nullable=False))
    op.drop_constraint(None, 'locations', type_='foreignkey')
    op.create_foreign_key(None, 'locations', 'addresses', ['address_id'], ['id'])
    op.drop_column('locations', 'address')
    op.drop_column('locations', 'location_type')
    op.drop_column('locations', 'longitude')
    op.drop_column('locations', 'latitude')
    op.drop_column('locations', 'user_id')
    op.add_column('hubs', sa.Column('address_id', sa.INTEGER(), nullable=True))
    op.add_column('hubs', sa.Column('coordinates', sa.VARCHAR(), nullable=True))
    op.create_foreign_key(None, 'hubs', 'addresses', ['address_id'], ['id'])
    op.drop_column('hubs', 'address')
    op.drop_column('hubs', 'longitude')
    op.drop_column('hubs', 'latitude')
    op.drop_column('hubs', 'description')
    op.create_table('addresses',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('recipient_name', sa.VARCHAR(), nullable=True),
    sa.Column('street', sa.VARCHAR(), nullable=False),
    sa.Column('house_number', sa.VARCHAR(), nullable=False),
    sa.Column('post_code', sa.VARCHAR(), nullable=False),
    sa.Column('city', sa.VARCHAR(), nullable=False),
    sa.Column('country', sa.VARCHAR(), nullable=True),
    sa.Column('coordinates', sa.VARCHAR(), nullable=True),
    sa.Column('address_type', sa.VARCHAR(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_addresses_id', 'addresses', ['id'], unique=False)
    op.create_table('message_attachments',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('message_id', sa.INTEGER(), nullable=True),
    sa.Column('file_path', sa.VARCHAR(), nullable=False),
    sa.Column('file_type', sa.VARCHAR(), nullable=False),
    sa.Column('file_name', sa.VARCHAR(), nullable=False),
    sa.Column('file_size', sa.INTEGER(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['message_id'], ['messages.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_message_attachments_id', 'message_attachments', ['id'], unique=False)
    # ### end Alembic commands ###
